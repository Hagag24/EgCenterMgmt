@page "/subject"
@page "/subject/{id:int}"
@inject HttpClient Http
@inject NavigationManager Navigation
@attribute [Authorize(Roles = "Admin")]

<PageTitle>@(id.HasValue ? "تعديل المادة" : "إنشاء مادة جديدة")</PageTitle>

<div class="container mt-4">
    <div class="card">
        <div class="card-header">
            <h5 class="mb-0">@("تعديل المادة")</h5>
        </div>
        <div class="card-body">
            @if (subjectDto == null)
            {
                <p><em>جار التحميل...</em></p>
            }
            else
            {
                <EditForm Model="subjectDto" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label for="subjectName" class="form-label">اسم المادة</label>
                        <InputText id="subjectName" class="form-control" @bind-Value="subjectDto.SubjectName" />
                    </div>
                    <div class="d-flex justify-content-between">
                        <Button Color="ButtonColor.Success" @onclick="HandleValidSubmit">@((id.HasValue ? "تحديث" : "إنشاء"))</Button>
                        <Button Color="ButtonColor.Danger" @onclick="Cancel">إلغاء</Button>
                    </div>
                </EditForm>
            }
        </div>
    </div>

    <Toasts class="p-3" Messages="messages" Placement="ToastsPlacement.TopRight" />
</div>

@code {
    [Parameter] public int? id { get; set; }
    private SubjectDto? subjectDto = new SubjectDto();
    private List<GradeDto>? grades;
    private List<ToastMessage> messages = new();

    protected override async Task OnInitializedAsync()
    {
        if (id.HasValue)
        {
            subjectDto = await Http.GetFromJsonAsync<SubjectDto>($"api/Subject/GetSubject/{id}");
        }
        grades = await Http.GetFromJsonAsync<List<GradeDto>>("api/Grade/GetGrades");
    }

    private async Task HandleValidSubmit()
    {
        HttpResponseMessage response;

        if (id.HasValue)
        {
            response = await Http.PutAsJsonAsync($"api/Subject/UpdateSubject/{id}", subjectDto);
        }
        else
        {
            response = await Http.PostAsJsonAsync("api/Subject/CreateSubject", subjectDto);
        }

        if (response.IsSuccessStatusCode)
        {
            ShowMessage(ToastType.Success, id.HasValue ? "تم تحديث المادة بنجاح." : "تم إنشاء المادة بنجاح.");
            Navigation.NavigateTo("/subjects");
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            ShowMessage(ToastType.Danger, $"فشل في معالجة الطلب. الخطأ: {errorMessage}");
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/subjects");
    }

    private void ShowMessage(ToastType toastType, string message)
    {
        messages.Add(new ToastMessage
            {
                Type = toastType,
                Title = "تنبيه",
                Message = message,
                HelpText = $"{DateTime.Now}"
            });
    }
}
