@page "/Payments"
@using AutoMapper
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "Admin")]

<PageTitle>إدارة مدفوعات الطلاب</PageTitle>

<h3>مدفوعات الطلاب</h3>

<Button Color="ButtonColor.Success" Class="mb-3" @onclick="CreatePayment">إضافة مدفوعة جديدة</Button>

@if (Payments == null)
{
    <p><em>جار التحميل...</em></p>
}
else
{
    <Modal @ref="modal" Title="تأكيد حذف المدفوعة">
        <BodyTemplate>
            <h5>هل تريد حذف المدفوعة <h1>"@PaymentId"</h1></h5>
            <h5>ستقوم بحذف كل البيانات المرتبطة بهذه المدفوعة.</h5>
        </BodyTemplate>
        <FooterTemplate>
            <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">رجوع</Button>
            <Button Color="ButtonColor.Danger" @onclick="() => DeletePayment(PaymentId)">حذف</Button>
        </FooterTemplate>
    </Modal>
    <Grid TItem="Vpayment"
          DataProvider="PaymentsDataProvider"
          AllowFiltering="true"
          AllowSorting="true"
          Class="table-hover table"
          FiltersRowCssClass="bg-primary text-white border-bottom-0 bg-opacity-25"
          HeaderRowCssClass="bg-primary text-white border-bottom-0"
          PageSize="150"
          AllowPaging="true"
          Responsive="true">
        <GridColumns>
            <GridColumn TItem="Vpayment" HeaderText="كود المدفوعة" PropertyName="PaymentId" SortKeySelector="item => item.PaymentId">
                @context.PaymentId
            </GridColumn>
            <GridColumn TItem="Vpayment" HeaderText="كود الطالب" PropertyName="Code" SortKeySelector="item => item.Code">
                @context.Code
            </GridColumn>
            <GridColumn TItem="Vpayment" HeaderText="اسم الطالب" PropertyName="StudentName" SortKeySelector="item => item.StudentName">
                @context.StudentName
            </GridColumn>
            <GridColumn TItem="Vpayment" HeaderText="اسم المجموعة" PropertyName="GroupName" SortKeySelector="item => item.GroupName">
                @context.GroupName
            </GridColumn>
            <GridColumn TItem="Vpayment" HeaderText="تاريخ الدفع" PropertyName="PaymentDate" SortKeySelector="item => item.PaymentDate">
                @context.PaymentDate?.ToString("yyyy-MM-dd")
            </GridColumn>
            <GridColumn TItem="Vpayment" HeaderText="المبلغ المطلوب" PropertyName="AmountRequired" SortKeySelector="item => item.AmountRequired">
                @context.AmountRequired?.ToString("0.00")
            </GridColumn>
            <GridColumn TItem="Vpayment" HeaderText="المبلغ" PropertyName="Amount" SortKeySelector="item => item.Amount">
                @context.Amount?.ToString("0.00")
            </GridColumn>
            <GridColumn TItem="Vpayment" HeaderText="المتبقي" PropertyName="Balance" SortKeySelector="item => item.Balance">
                @context.Balance?.ToString("0.00")
            </GridColumn>
            <GridColumn TItem="Vpayment" HeaderText="نوع الدفع" PropertyName="PaymentType" SortKeySelector="item => item.PaymentType">
                @context.PaymentType
            </GridColumn>
            <GridColumn TItem="Vpayment" HeaderText="تعديل" PropertyName="Operations">
                <Button Color="ButtonColor.Primary" @onclick="() => EditPayment(context.PaymentId)">تعديل</Button>
            </GridColumn>
            <GridColumn TItem="Vpayment" HeaderText="حذف" PropertyName="Operations">
                <Button Color="ButtonColor.Danger" @onclick="()=>OnShowModalClick(context)">حذف</Button>
            </GridColumn>
        </GridColumns>


    </Grid>

}

<Toasts class="p-3" Messages="messages" Placement="ToastsPlacement.TopRight" />

@code {
    private Modal modal = default!;
    private List<Vpayment>? Payments;
    private List<ToastMessage> messages = new();

    private async Task<GridDataProviderResult<Vpayment>> PaymentsDataProvider(GridDataProviderRequest<Vpayment> request)
    {
        if (Payments == null)
            Payments = await Http.GetFromJsonAsync<List<Vpayment>>("api/Payment/VPayment");
        IEnumerable<Vpayment> dataToApply = Payments ?? Enumerable.Empty<Vpayment>();
        return await Task.FromResult(request.ApplyTo(dataToApply));
    }

    public int PaymentId;

    private async Task OnShowModalClick(Vpayment payment)
    {
        PaymentId = payment.PaymentId;
        await modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
        PaymentId = 0;
    }

    protected override async Task OnInitializedAsync()
    {
        Payments = await Http.GetFromJsonAsync<List<Vpayment>>("api/Payment/VPayment");
    }

    private void EditPayment(int id)
    {
        Navigation.NavigateTo($"/payment/{id}");
    }

    private async Task DeletePayment(int id)
    {
        var response = await Http.DeleteAsync($"api/Payment/DeletePayment/{id}");
        if (response.IsSuccessStatusCode)
        {
            ShowMessage(ToastType.Success, "تم حذف المدفوعات بنجاح.");
            Payments = await Http.GetFromJsonAsync<List<Vpayment>>("api/Payment/VPayment");
        }
        else
        {
            string errorMessage = await response.Content.ReadAsStringAsync();
            ShowMessage(ToastType.Danger, $"فشل في حذف المدفوعات. الخطأ: {errorMessage}");
        }
        await OnHideModalClick();
    }

    private void CreatePayment()
    {
        Navigation.NavigateTo("/payment");
    }

    private void ShowMessage(ToastType toastType, string message)
    {
        messages.Add(new ToastMessage
            {
                Type = toastType,
                Title = "تنبيه",
                Message = message,
                HelpText = $"{DateTime.Now}"
            });
    }
}
