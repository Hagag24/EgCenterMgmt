@page "/vattendances"
@page "/vattendances/student/{StudentId:int?}"
@page "/vattendances/group/{GroupId:int?}"
@page "/vattendances/teacher/{TeacherId:int?}"


@attribute [Authorize(Roles = "Admin, Assistant")]
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IMapper _mapper
@inject IToastService toastService

<style>
.my-custom-table {
    border-radius: 10px; /* تعيين حواف مستديرة */
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); /* إضافة ظل */
    /* أي تخصيصات أخرى تحتاجها */
}
</style>
<PageTitle>تسجيل الحضور</PageTitle>
<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="5000" Placement="ToastsPlacement.TopRight" />

@if (AttendancesList == null)
{
    <p><em>جار التحميل...</em></p>
}
else
{
    if(GroupId != null)
    {
            <Button Color="ButtonColor.Success" @onclick="FirestAttendancTrue">اتمام حضور المجموعة</Button>
    }
    <Modal @ref="cancelModal" Title="تأكيد إلغاء الحضور">
        <BodyTemplate>
            <p>هل تريد إلغاء الحضور؟</p>
            <p>أدخل الملاحظات:</p>
            <InputText id="reason" class="form-control" @bind-Value="cancellationDro.Reason" />
        </BodyTemplate>
        <FooterTemplate>
            <Button Color="ButtonColor.Secondary" @onclick="OnHideModal">رجوع</Button>
            <Button Color="ButtonColor.Danger" @onclick="() => ConfirmCancelBooking(context!)">إلغاء الحضور</Button>
        </FooterTemplate>
    </Modal>

    <Modal @ref="renewModal" Title="تجديد الاشتراك">
        <BodyTemplate>
            <p>اختر نوع التجديد:</p>
            <Button Color="ButtonColor.Warning" @onclick="() => ConfirmRenewSubscription(Session)">تجديد بالحصة</Button>
            <Button Color="ButtonColor.Primary" @onclick="() => ConfirmRenewSubscription(Month)">تجديد بالشهري</Button>
        </BodyTemplate>
    </Modal>

    <Grid TItem="Vattendance"
          DataProvider="AttendancesListDataProvider"
          AllowFiltering="true"
          AllowSorting="true"
          class="table-hover table-bordered table-striped my-custom-table table"
          FiltersRowCssClass="bg-primary text-white border-bottom-0 bg-opacity-25"
          HeaderRowCssClass="bg-primary text-white border-bottom-0"
          PageSize="150"
          AllowPaging="true"
          Responsive="true">


        <GridColumns>
            <GridColumn TItem="Vattendance" HeaderText="كود الطالب" PropertyName="Code">
                @context.Code
            </GridColumn>
            <GridColumn TItem="Vattendance" HeaderText="اسم الطالب" PropertyName="StudentName">
                @context.StudentName
            </GridColumn>
            <GridColumn TItem="Vattendance" HeaderText="اسم المجموعة" PropertyName="GroupName">
                @context.GroupName
            </GridColumn>
            <GridColumn TItem="Vattendance" HeaderText="اسم المعلم" PropertyName="TeacherName">
                @context.TeacherName
            </GridColumn>
            <GridColumn TItem="Vattendance" HeaderText="حالة الحضور" PropertyName="AttendanceStatus">
                @{
                    var AttendanceStatus = context.AttendanceStatus == true ? "حضور" : "غياب";
                }
                @AttendanceStatus
            </GridColumn>
            <GridColumn TItem="Vattendance" HeaderText="المبلغ المدفوع">
                @if (context.PaymentId == null || context.IsAttendanc == false)
                {
                    <InputNumber @bind-Value="@context.Amount"
                                 Min="0"
                                 class="form-control"
                                 style="text-align:center;" />
                }
            </GridColumn>
            @{
                int stidsub = 0;
                int stid = 0;
            }
            <GridColumn TItem="Vattendance" HeaderText="المبلغ المتبقي" PropertyName="Balance">
                @if (context.StudentId != stid && context.IsAttendanc == false && StudentBalance!.Count > 0)
                {
                    stid = context.StudentId;
                    @StudentBalance.Where(s => s.StudentId == context.StudentId && s.GroupId == context.GroupId).Sum(s => s.RemainingBalance)
                }
            </GridColumn>
            <GridColumn TItem="Vattendance" HeaderText="الإجراءات">
                @if (!context.IStatus && context.AttendanceDate < DateOnly.FromDateTime(DateTime.Now.Date))
                {
                    @if (context.IsAttendanc == false)
                    {
                        if (context.PaymentType == "معفي")
                        {
                            <Button Color="ButtonColor.Primary" disabled="@isButtonDisabled" Variant="Filled" @onclick="() => RegisterAttendance(context, false)">تسجيل حضور</Button>
                        }
                        else if (context.PaymentType == "معفي من المعلم")
                        {
                            if (StudentBalance!.Where(s => s.StudentId == context.StudentId && s.GroupId == context.GroupId).Sum(s => s.RemainingBalance) > 0)
                            {
                                <Button Color="ButtonColor.Info" disabled="@isButtonDisabled" Variant="Filled" @onclick="() => RegisterAttendance(context, true)">دفع شهرية السنتر وتسجيل الحضور</Button>
                            }
                            else
                            {
                                <Button Color="ButtonColor.Primary" disabled="@isButtonDisabled" Variant="Filled" @onclick="() => RegisterAttendance(context, false)">تسجيل حضور</Button>
                            }
                        }
                        else if (context.PaymentType == "حصة")
                        {
                            <Button Color="ButtonColor.Warning" disabled="@isButtonDisabled" Variant="Filled" @onclick="() => RegisterAttendance(context, true)">دفع الحصة وتسجيل حضور</Button>
                        }
                        else
                        {
                            if (StudentBalance!.Where(s => s.StudentId == context.StudentId && s.GroupId == context.GroupId).Sum(s => s.RemainingBalance) > 0)
                            {
                                <Button Color="ButtonColor.Info" disabled="@isButtonDisabled" Variant="Filled" @onclick="() => RegisterAttendance(context, true)">دفع الشهرية وتسجيل حضور</Button>
                            }
                            else
                            {
                                <Button Color="ButtonColor.Primary" disabled="@isButtonDisabled" Variant="Filled" @onclick="() => RegisterAttendance(context, false)">تسجيل حضور</Button>
                            }
                        }
                    }
                    else
                    {
                        @if (context.StudentId != stidsub)
                        {
                            var allTrue = AttendancesList
                            .Where(s => s.StudentId == context.StudentId &&
                            s.GroupId == context.GroupId &&
                            s.BookingId == context.BookingId)
                            .All(s => s.IsAttendanc == true);

                            if (allTrue)
                            {
                                @if (context.PaymentType == "معفي" || context.PaymentType == "معفي من المعلم")
                                {
                                    <Button Color="ButtonColor.Success" disabled="@isButtonDisabled" Variant="Filled" @onclick="() => RenewSingle(context.AttendanceId)">تجديد اشتراك</Button>
                                }
                                else
                                {
                                    <Button Color="ButtonColor.Success" disabled="@isButtonDisabled" Variant="Filled" @onclick="() => RenewSubscription(context)">تجديد اشتراك</Button>
                                }
                                stidsub = context.StudentId;

                            }
                        }
                        if (context.AttendanceDate == DateOnly.FromDateTime(DateTime.Today))
                        {
                            <Button Color="ButtonColor.Danger" disabled="@isButtonDisabled" Variant="Filled" @onclick="() => OpenCancelModal(context)">إلغاء الحضور</Button>
                        }
                    }
                }
            </GridColumn>
            <GridColumn TItem="Vattendance" HeaderText="حالة الطالب" PropertyName="IStatus">
                @{
                    var status = context.IStatus ? "مرفود" : "ملتزم";
                    var buttonClass = context.IStatus ? "btn btn-danger" : "btn btn-success";
                }
                <button class="@buttonClass">
                    @status
                </button>
            </GridColumn>


            <GridColumn TItem="Vattendance" HeaderText="نظام الاشتراك" PropertyName="PaymentType">
                @context.PaymentType
            </GridColumn>
        <GridColumn TItem="Vattendance" HeaderText="اسم الفرع" PropertyName="BranchName">
            @context.BranchName
        </GridColumn>
            <GridColumn TItem="Vattendance" HeaderText="اليوم" PropertyName="BranchLocation">
                @context.DayOfWeek
            </GridColumn>
            <GridColumn TItem="Vattendance" HeaderText="تاريخ اليوم" PropertyName="AttendanceDate">
                @((context.AttendanceDate!.Value).ToString("yyyy-MM-dd"))
            </GridColumn>
        </GridColumns>

    </Grid>
}

@code {
    [Parameter]
    public int? StudentId { get; set; }
    [Parameter]
    public int? GroupId { get; set; }
    [Parameter]
    public int? TeacherId { get; set; }
    private List<Vattendance>? AttendancesList;
    List<ToastMessage> messages = new List<ToastMessage>();
    private string? Message;
    private Modal renewModal = default!;
    private int selectedAttendanceId;
    private string selectedRenewalType = string.Empty;
    private string Session = "حصة";
    private string Month = "شهري";
    private Modal cancelModal = default!;
    private AttendanceCancellationDto  cancellationDro = new AttendanceCancellationDto();
    private Vattendance? context;
    private PaymentDto? PaymentDto;
    private List<StudentBalanceDto>? StudentBalance;
    private List<CenterRate>? centerRate;
    private bool isButtonDisabled = false;

    public int AttendanceId;

    private void ShowMessage(ToastType toastType) => messages.Add(CreateToastMessage(toastType));

    private ToastMessage CreateToastMessage(ToastType toastType)
    => new ToastMessage
        {
            Type = toastType,
            Title = "عملية تسجيل حضور",
            HelpText = $"{DateTime.Now}",
            Message = Message,
        };
    private async Task<GridDataProviderResult<Vattendance>> AttendancesListDataProvider(GridDataProviderRequest<Vattendance> request)
    {
        if (AttendancesList == null)
        {            await LoadAttendancesList();
        }
        IEnumerable<Vattendance> dataToApply = AttendancesList ?? Enumerable.Empty<Vattendance>();
        return request.ApplyTo(dataToApply);
    }

    private void OnShowModalClick(Vattendance attendance)
    {
        AttendanceId = attendance.AttendanceId;
    }

    private void OnHideModalClick()
    {
        AttendanceId = 0;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadAttendancesList();
    }
    private async Task FirestAttendancTrue()
    {
        var response = await Http.GetAsync($"api/Attendance/FirestAttendancTrue?GroupId={GroupId}");
        if (response.IsSuccessStatusCode)
        {
            Message = $"نجح في اتمام الحضور في المجموعة : {DateTime.Now}";
            ShowMessage(ToastType.Success);
        }
        else
        {
            Message = $"فشل في اتمام الحضور في المجموعة. الخطأ: {response.RequestMessage} : {DateTime.Now}";
            ShowMessage(ToastType.Danger);
        }

    }

    private async Task LoadAttendancesList()
    {
        try
        {
            string url = "api/Attendance/VAttendances";

            if (StudentId.HasValue)
            {
                url = $"api/Attendance/VAttendancesstudent?studentid={StudentId.Value}";
            }
            else if (GroupId.HasValue)
            {
                url = $"api/Attendance/VAttendancesgroup?groupid={GroupId.Value}";
            }
            else if (TeacherId.HasValue)
            {
                url = $"api/Attendance/VAttendancetech?techid={TeacherId.Value}";
            }

            AttendancesList = await Http.GetFromJsonAsync<List<Vattendance>>(url);
            var studentNumbers = AttendancesList!.Select(sb => sb.StudentId).Distinct().ToList();
            var groupNumbers = AttendancesList!.Select(sb => sb.GroupId).Distinct().ToList();
            var requestDto = new StudentBalanceRequestDto
                {
                    StudentIds = studentNumbers,
                    GroupIds = groupNumbers
                };
            var response = await Http.PostAsJsonAsync("api/Payment/GetStudentBalances", requestDto);

            if (response.IsSuccessStatusCode)
            {
                StudentBalance = await response.Content.ReadFromJsonAsync<List<StudentBalanceDto>>(); // يجب أن تكون List<StudentBalanceDto>
            }
            else
            {
                StudentBalance = new List<StudentBalanceDto>();
            }
            centerRate = await Http.GetFromJsonAsync<List<CenterRate>>("api/CenterRate/GetRates");
        }
        catch (Exception ex)
        {
            Message = $"فشل في تحميل الحضور. الخطأ: {ex.Message} : {DateTime.Now}";
            ShowMessage(ToastType.Danger);
        }
    }
    private async Task RenewSubscription(Vattendance attendance)
    {
        isButtonDisabled = true;

        selectedAttendanceId = attendance.AttendanceId;
        await renewModal.ShowAsync();
    }

    private async Task ConfirmRenewSubscription(string renewalType)
    {
        isButtonDisabled = true;
        selectedRenewalType = renewalType;
        await renewModal.HideAsync();

        // تنفيذ عملية التجديد بناءً على نوع التجديد المختار
        if (selectedRenewalType == "حصة")
        {
            await RenewBySession(selectedAttendanceId);
        }
        else if (selectedRenewalType == "شهري")
        {
            await RenewByMonth(selectedAttendanceId);
        }

        isButtonDisabled = false;
        await UpdateGridAfterTask();
    }

    private async Task RegisterAttendance(Vattendance attendance,bool pay)
    {
        isButtonDisabled = true;

        try
        {
            if (attendance.Amount != 0)
            {
                var paymentDto = new PaymentDto();
                var group = await Http.GetFromJsonAsync<GroupDto>($"api/Group/GetGroup?id={attendance.GroupId}");
                if (pay)
                {
                    if (attendance.PaymentType == "حصة")
                    {
                        if (group == null)
                        {
                            Message = $"لم يتم العثور على المجموعة : {DateTime.Now}";
                            ShowMessage(ToastType.Danger);
                            isButtonDisabled = false;
                            return;
                        }

                        paymentDto.StudentId = attendance.StudentId;
                        paymentDto.GroupId = attendance.GroupId;
                        paymentDto.Amount = attendance.Amount;
                        // if (attendance.Amount == null)
                        // {
                        //     paymentDto.Amount = StudentBalance.Where(s => s.StudentId == attendance.StudentId && s.GroupId == attendance.GroupId).Sum(s => s.RemainingBalance);
                        // }else
                        // {
                        //     paymentDto.Amount = attendance.Amount;

                        // }
                        paymentDto.AmountRequired = group.ServingPrice;
                        paymentDto.Balance = group.ServingPrice - attendance.Amount;
                        paymentDto.PaymentDate = DateOnly.FromDateTime(DateTime.Now);
                        paymentDto.PaymentType = attendance.PaymentType;

                        var paymentResponse = await Http.PostAsJsonAsync("api/Payment/PostPayment", paymentDto);
                        if (!paymentResponse.IsSuccessStatusCode)
                        {
                            var errorContent = await paymentResponse.Content.ReadAsStringAsync();
                            Console.WriteLine($"Error: {errorContent}");
                            Message = $"فشل في عملية الدفع. يرجى المحاولة مرة أخرى : {DateTime.Now}";
                            ShowMessage(ToastType.Danger);
                            isButtonDisabled = false;
                            return;
                        }

                        // استخراج معرف الدفع من الاستجابة
                        PaymentDto = await paymentResponse.Content.ReadFromJsonAsync<PaymentDto>();
                    }
                    else if (attendance.PaymentType == "شهري")
                    {
                        // إذا كان الدفع شهري وكان رقم الدفع يساوي null، قم بعملية دفع باشتراك شهري
                        if (attendance.PaymentId == null)
                        {
                            if (group == null)
                            {
                                Message = $"لم يتم العثور على المجموعة : {DateTime.Now}";
                                ShowMessage(ToastType.Danger);
                                isButtonDisabled = false;
                                return;
                            }

                            paymentDto.StudentId = attendance.StudentId;
                            paymentDto.GroupId = attendance.GroupId;
                            paymentDto.Amount = attendance.Amount;
                            // if (attendance.Amount == null)
                            // {
                            //     paymentDto.Amount = StudentBalance.Where(s => s.StudentId == attendance.StudentId && s.GroupId == attendance.GroupId).Sum(s => s.RemainingBalance);
                            // }else
                            // {
                            //     paymentDto.Amount = attendance.Amount;

                            // }
                            paymentDto.AmountRequired = attendance.AmountRequired;
                            paymentDto.Balance = group.Pricepermonth - attendance.Amount;
                            paymentDto.PaymentDate = DateOnly.FromDateTime(DateTime.Now);
                            paymentDto.PaymentType = attendance.PaymentType;



                            var paymentResponse = await Http.PostAsJsonAsync("api/Payment/PostPayment", paymentDto);
                            if (!paymentResponse.IsSuccessStatusCode)
                            {
                                Message = $"فشل في عملية الدفع. يرجى المحاولة مرة أخرى {paymentResponse.StatusCode}: {DateTime.Now}";
                                ShowMessage(ToastType.Danger);
                                isButtonDisabled = false;
                                return;
                            }

                            // استخراج معرف الدفع من الاستجابة
                            PaymentDto = await paymentResponse.Content.ReadFromJsonAsync<PaymentDto>();
                        }
                    }
                    else if (attendance.PaymentType == "معفي من المعلم")
                    {
                        var studentbalanc = StudentBalance!.Find(s => s.StudentId == attendance.StudentId);
                        if (studentbalanc != null)
                        {
                            if (studentbalanc.RemainingBalance > 0)
                            {
                                if (group == null)
                                {
                                    Message = $"لم يتم العثور على المجموعة : {DateTime.Now}";
                                    ShowMessage(ToastType.Danger);
                                    isButtonDisabled = false;
                                    return;
                                }
                                var requir = centerRate!.FirstOrDefault(a => a.Rate == group.Pricepermonth);

                                paymentDto.StudentId = attendance.StudentId;
                                paymentDto.GroupId = attendance.GroupId;
                                paymentDto.Amount = attendance.Amount;
                                paymentDto.AmountRequired = attendance.AmountRequired;
                                paymentDto.Balance = group.Pricepermonth - attendance.Amount;
                                paymentDto.PaymentDate = DateOnly.FromDateTime(DateTime.Now);
                                paymentDto.PaymentType = attendance.PaymentType;



                                var paymentResponse = await Http.PostAsJsonAsync("api/Payment/PostPayment", paymentDto);
                                if (!paymentResponse.IsSuccessStatusCode)
                                {
                                    Message = $"فشل في عملية الدفع. يرجى المحاولة مرة أخرى : {DateTime.Now}";
                                    ShowMessage(ToastType.Danger);
                                    isButtonDisabled = false;
                                    return;
                                }

                                // استخراج معرف الدفع من الاستجابة
                                PaymentDto = await paymentResponse.Content.ReadFromJsonAsync<PaymentDto>();
                            }
                        }
                    }
                }
            }
            var attendanceDto = _mapper.Map<AttendanceDto>(attendance);
            attendanceDto.AttendanceStatus = true;
            attendanceDto.IsAttendanc = true;
            attendanceDto.BookingId = attendance.BookingId;
            if (PaymentDto == null || PaymentDto.PaymentId == 0)
            {
                attendanceDto.PaymentId = null;
            }
            else
            {
                attendanceDto.PaymentId = PaymentDto.PaymentId;
            }
            var response = await Http.PutAsJsonAsync($"api/Attendance/PutAttendance/{attendanceDto.AttendanceId}", attendanceDto);

            if (response.IsSuccessStatusCode)
            {
                await UpdateGridAfterTask();
                Message = $"تمت عملية تسجيل الحضور بنجاح : {DateTime.Now}";
                ShowMessage(ToastType.Success);
            }
            else
            {
                Message = $"فشل في تسجيل الحضور. يرجى المحاولة مرة أخرى : {DateTime.Now}";
                ShowMessage(ToastType.Danger);
            }
            isButtonDisabled = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in RegisterAttendance: {ex.Message}");
            Message = $"فشل في عملية تسجيل الحضور. يرجى المحاولة مرة أخرى : {DateTime.Now}";
            ShowMessage(ToastType.Danger);
            isButtonDisabled = false;
        }
    }

    private async Task OpenCancelModal(Vattendance attendance)
    {
        context = attendance;
        await cancelModal.ShowAsync();
    }

    private async Task OnHideModal()
    {
        await cancelModal.HideAsync();
        cancellationDro = new AttendanceCancellationDto();
    }

    private async Task ConfirmCancelBooking(Vattendance attendance)
    {
        isButtonDisabled = true;
        var attendanceDto = _mapper.Map<AttendanceDto>(attendance);
        attendanceDto.AttendanceStatus = false;
        attendanceDto.IsAttendanc = false;

        if (attendanceDto.PaymentType == "حصة" && attendanceDto.PaymentId.HasValue)
        {
            attendance.Amount = null;
            attendanceDto.PaymentId = null;
        }

        var updateAttendanceResponse = await Http.PutAsJsonAsync($"api/Attendance/PutAttendanceCancellation/{attendanceDto.AttendanceId}", attendanceDto);
        if (updateAttendanceResponse.IsSuccessStatusCode)
        {
            cancellationDro.StudentId = attendanceDto.StudentId;
            cancellationDro.GroupId = attendanceDto.GroupId;
            cancellationDro.BookingId = attendanceDto.BookingId;
            cancellationDro.CancellationDate = DateTime.Now;
            var cancellationResponse = await Http.PostAsJsonAsync("api/AttendanceCancellation/CreateCancellation", cancellationDro);
            if (cancellationResponse.IsSuccessStatusCode)
            {
                Message = $"تم إلغاء الحضور بنجاح. {DateTime.Now}";
                ShowMessage(ToastType.Success);
                await UpdateGridAfterTask();
                await cancelModal.HideAsync();
            }
            else
            {
                Message = $"فشل في إلغاء الحضور. يرجى المحاولة مرة أخرى. {DateTime.Now}";
                ShowMessage(ToastType.Danger);
                isButtonDisabled = false;
                return;
            }
            if (attendanceDto.PaymentType == "حصة")
            {
                var deletePaymentResponse = await Http.DeleteAsync($"api/Payment/DeletePayment/{attendanceDto.PaymentId}");
                if (deletePaymentResponse.IsSuccessStatusCode)
                {
                    attendance.Amount = 0;
                    attendanceDto.PaymentId = null;
                }
                else
                {
                    Message = $"فشل في حذف عملية الدفع. يرجى المحاولة مرة أخرى. {DateTime.Now}";
                    ShowMessage(ToastType.Danger);
                    isButtonDisabled = false;
                    return;
                }
            }
            isButtonDisabled = false;
        }
        else
        {
            Message = $"فشل في تحديث الحضور. يرجى المحاولة مرة أخرى. {DateTime.Now}";
            ShowMessage(ToastType.Danger);
            isButtonDisabled = false;
        }
    }

    private async Task RenewSingle(int attendanceId)
    {
        isButtonDisabled = true;

        // تنفيذ عملية التجديد بالحصة
        var attendance = AttendancesList?.FirstOrDefault(a => a.AttendanceId == attendanceId);
        if (attendance != null)
        {
            var attanceDto = _mapper.Map<AttendanceDto>(attendance);
            attanceDto.AttendanceDate = DateOnly.FromDateTime(DateTime.Now);
            attanceDto.PaymentType = attendance.PaymentType;

            var response = await Http.PutAsJsonAsync($"api/Attendance/putAttendanceMonthOrSession", attanceDto);
            if (response.IsSuccessStatusCode)
            {
                Message = $"تم تجديد الاشتراك بنجاح: {DateTime.Now}";
                ShowMessage(ToastType.Success);
            }
            else
            {
                Message = $"فشل في تجديد الاشتراك. يرجى المحاولة مرة أخرى: {DateTime.Now}";
                ShowMessage(ToastType.Danger);
            }
        }
    }


    private async Task RenewBySession(int attendanceId)
    {
        // تنفيذ عملية التجديد بالحصة
        var attendance = AttendancesList?.FirstOrDefault(a => a.AttendanceId == attendanceId);
        if (attendance != null)
        {
            var attanceDto = _mapper.Map<AttendanceDto>(attendance);
            attanceDto.PaymentType = "حصة";

            var response = await Http.PutAsJsonAsync($"api/Attendance/putAttendanceMonthOrSession", attanceDto);
            if (response.IsSuccessStatusCode)
            {
                Message = $"تم تجديد الاشتراك بالحصة بنجاح: {DateTime.Now}";
                ShowMessage(ToastType.Success);
            }
            else
            {
                Message = $"فشل في تجديد الاشتراك بالحصة. يرجى المحاولة مرة أخرى: {DateTime.Now}";
                ShowMessage(ToastType.Danger);
            }
        }
    }
    private async Task RenewByMonth(int attendanceId)
    {
        // تنفيذ عملية التجديد بالشهري
        var attendance = AttendancesList?.FirstOrDefault(a => a.AttendanceId == attendanceId);
        if (attendance != null)
        {
            var attanceDto = _mapper.Map<AttendanceDto>(attendance);
            attanceDto.PaymentType = "شهري";

            var response = await Http.PutAsJsonAsync($"api/Attendance/putAttendanceMonthOrSession", attanceDto);
            if (response.IsSuccessStatusCode)
            {
                Message = $"تم تجديد الاشتراك بالشهري بنجاح: {DateTime.Now}";
                ShowMessage(ToastType.Success);
            }
            else
            {
                Message = $"فشل في تجديد الاشتراك بالشهري. يرجى المحاولة مرة أخرى: {DateTime.Now}";
                ShowMessage(ToastType.Danger);
            }
        }
    }

    private async Task DeleteAttendance(int id)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "هل أنت متأكد أنك تريد حذف هذا الحضور؟");
        if (confirmed)
        {
            var response = await Http.DeleteAsync($"api/Attendance/DeleteAttendance?id={id}");
            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "تم حذف الحضور بنجاح.");
                Message = $"تم حذف الحضور بنجاح : {DateTime.Now}";
                ShowMessage(ToastType.Success);
                await LoadAttendancesList();
            }
            else
            {
                string errorMessage = await response.Content.ReadAsStringAsync();
                Message = $"فشل في حذف الحضور. الخطأ: {errorMessage} : {DateTime.Now}";
                ShowMessage(ToastType.Danger);
            }
        }
        OnHideModalClick();
    }
    private void HandleFiltering()
    {
        Console.WriteLine("تم تطبيق فلتر على البيانات!");
    }

    private async Task UpdateGridAfterTask()
    {
        try
        {
            string url = "api/Attendance/VAttendances";

            if (StudentId.HasValue)
            {
                url = $"api/Attendance/VAttendancesstudent?studentid={StudentId.Value}";
            }
            else if (GroupId.HasValue)
            {
                url = $"api/Attendance/VAttendancesgroup?groupid={GroupId.Value}";
            }
            else if (TeacherId.HasValue)
            {
                url = $"api/Attendance/VAttendancetech?techid={TeacherId.Value}";
            }

            AttendancesList = await Http.GetFromJsonAsync<List<Vattendance>>(url);
            var studentNumbers = AttendancesList!.Select(sb => sb.StudentId).Distinct().ToList();
            var groupNumbers = AttendancesList!.Select(sb => sb.GroupId).Distinct().ToList();
            var requestDto = new StudentBalanceRequestDto
                {
                    StudentIds = studentNumbers,
                    GroupIds = groupNumbers
                };
            var response = await Http.PostAsJsonAsync("api/Payment/GetStudentBalances", requestDto);

            if (response.IsSuccessStatusCode)
            {
                StudentBalance = await response.Content.ReadFromJsonAsync<List<StudentBalanceDto>>(); // يجب أن تكون List<StudentBalanceDto>
            }
            else
            {
                StudentBalance = new List<StudentBalanceDto>();
            }
            centerRate = await Http.GetFromJsonAsync<List<CenterRate>>("api/CenterRate/GetRates");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Message = $"فشل في تحميل الحضور. الخطأ: {ex.Message} : {DateTime.Now}";
            ShowMessage(ToastType.Danger);
        }
    }
}
