@page "/expense"
@page "/Expenses/{id:int}"

@inject HttpClient Http
@inject NavigationManager Navigation
@attribute [Authorize(Roles = "Admin")]

<PageTitle>@(id.HasValue ? "تعديل المصروف" : "إنشاء مصروف جديدة")</PageTitle>

<h3>@(id.HasValue ? "تعديل المصروف" : "إنشاء مصروف جديدة")</h3>

@if (expenseDto == null)
{
    <p><em>جار التحميل...</em></p>
}
else
{
    <div class="card">
        <div class="card-body">
            <EditForm Model="expenseDto" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label for="expenseDescription" class="form-label">وصف المصروف</label>
                    <InputText id="expenseDescription" class="form-control" @bind-Value="expenseDto.Description" />
                </div>
                <div class="mb-3">
                    <label for="expenseAmount" class="form-label">المبلغ</label>
                    <InputNumber id="expenseAmount" class="form-control" @bind-Value="expenseDto.Amount" />
                </div>
                <div class="mb-3">
                    <label for="expenseDate" class="form-label">تاريخ المصروف</label>
                    <InputDate id="expenseDate" class="form-control" @bind-Value="expenseDto.Date" />
                </div>
                <div class="mb-3">
                    <label for="expenseCategory" class="form-label">فئة المصروف</label>
                    <InputText id="expenseCategory" class="form-control" @bind-Value="expenseDto.Category" />
                </div>
                <div class="mb-3">
                    <label for="expensePayee" class="form-label">اسم المستلم</label>
                    <InputText id="expensePayee" class="form-control" @bind-Value="expenseDto.Payee" />
                </div>
                <div class="d-flex justify-content-between">
                    <Button Color="ButtonColor.Success" @onclick="HandleValidSubmit">@((id.HasValue ? "تحديث" : "إنشاء"))</Button>
                    <Button Color="ButtonColor.Danger" @onclick="Cancel">إلغاء</Button>
                </div>
            </EditForm>
        </div>
    </div>
}

<Toasts class="p-3" Messages="messages" Placement="ToastsPlacement.TopRight" />

@code {
    [Parameter] public int? id { get; set; }
    private ExpenseDto? expenseDto = new ExpenseDto();
    private List<ToastMessage> messages = new();

    protected override async Task OnInitializedAsync()
    {
        if (id.HasValue)
        {
            expenseDto = await Http.GetFromJsonAsync<ExpenseDto>($"api/Expenses/GetExpense?id={id}");
        }
    }

    private async Task HandleValidSubmit()
    {
        HttpResponseMessage response;

        try
        {
            if (id.HasValue)
            {
                // تحديث المصروف
                response = await Http.PutAsJsonAsync($"api/Expenses/UpdateExpense?id={id}", expenseDto);
            }
            else
            {
                // إنشاء مصروف جديدة
                response = await Http.PostAsJsonAsync("api/Expenses/CreateExpense", expenseDto);
            }

            if (response.IsSuccessStatusCode)
            {
                ShowMessage(ToastType.Success, id.HasValue ? "تم تحديث المصروف بنجاح." : "تم إنشاء المصروف بنجاح.");
            }
            else
            {
                string errorMessage = await response.Content.ReadAsStringAsync();
                ShowMessage(ToastType.Danger, $"فشلت العملية. الخطأ: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            ShowMessage(ToastType.Danger, $"فشلت العملية. الخطأ: {ex.Message}");
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/expenses");
    }

    private void ShowMessage(ToastType toastType, string message)
    {
        messages.Add(CreateToastMessage(toastType, message));
    }

    private ToastMessage CreateToastMessage(ToastType toastType, string message)
    {
        return new ToastMessage
            {
                Type = toastType,
                Title = "عملية المصروف",
                HelpText = $"{DateTime.Now}",
                Message = message,
            };
    }
}
