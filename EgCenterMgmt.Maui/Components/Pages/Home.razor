 @page "/"

@attribute [Authorize(Roles = "Admin, Assistant")]

@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (statistics == null)
{
<p>تحميل الإحصائيات...</p>
}
else
{
<h3>إحصائيات</h3>
<div class="row">
    @foreach (var stat in statistics.Select((value, index) => new { value, index }))
    {
        <div class="col-md-4 mb-3">
            <div class="card custom-card @($"custom-card-{(stat.index % 6) + 1}")">
                <div class="card-body">
                    <h5 class="card-title">@stat.value.Key</h5>
                    <p class="card-text">@stat.value.Value</p>
                </div>
            </div>
        </div>
    }
</div>


}

@code {
    private AllDataDto? _allData;
    private Dictionary<string, int>? statistics;
    private ClaimsPrincipal? user;
    private string? userRole;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

            user = authState.User;

            var roles = user?.FindAll(ClaimTypes.Role).ToList();

            if (roles != null)
            {
                var adminRole = roles.FirstOrDefault(r => r.Value == "Admin")
                                ?? roles.FirstOrDefault(r => r.Value == "Assistant");
                userRole = adminRole?.Value ?? string.Empty;
            }

            Console.WriteLine($"User Role: {userRole}");

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception occurred: {ex.Message}");
        }


        if (userRole == "Admin")
        {
            statistics = await Http.GetFromJsonAsync<Dictionary<string, int>>("api/Analytics/GetAdminStatistics");
        }
        else if (userRole == "Assistant")
        {
            statistics = await Http.GetFromJsonAsync<Dictionary<string, int>>($"api/Analytics/GetAssistantStatistics?userId={UserDaitels.UserId}");
        }
    }
}