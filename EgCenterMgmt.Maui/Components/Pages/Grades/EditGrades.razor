@page "/grade"
@page "/grade/{id:int}"

@inject HttpClient Http
@inject NavigationManager Navigation
@attribute [Authorize(Roles = "Admin")]

<PageTitle>@(id.HasValue ? "تعديل الصف" : "إنشاء صف جديد")</PageTitle>

<div class="card">
    <div class="card-header">
        <h3>@(id.HasValue ? "تعديل الصف" : "إنشاء صف جديد")</h3>
    </div>
    <div class="card-body">
        @if (gradeDto == null)

        {
            <p><em>جار التحميل...</em></p>
        }

        else

        {
            <EditForm Model="gradeDto" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label for="gradeName" class="form-label">اسم الصف</label>
                    <InputText id="gradeName" class="form-control" @bind-Value="gradeDto.GradeName" />
                </div>
                <div class="d-flex justify-content-between">
                    <Button Color="ButtonColor.Success" @onclick="HandleValidSubmit">@((id.HasValue ? "تحديث" : "إنشاء"))</Button>
                    <Button Color="ButtonColor.Danger" @onclick="Cancel">إلغاء</Button>
                </div>
            </EditForm>
        }
    </div>
</div>

<Toasts class="p-3" Messages="messages" Placement="ToastsPlacement.TopRight" />

@code {
    [Parameter] public int? id { get; set; }

    private GradeDto? gradeDto = new GradeDto();

    private List<ToastMessage> messages = new();

    private Modal modal = default!;



    protected override async Task OnInitializedAsync()

    {

        if (id.HasValue)

        {

            gradeDto = await Http.GetFromJsonAsync<GradeDto>($"api/Grade/GetGrade/{id}");

        }

    }



    private async Task HandleValidSubmit()

    {

        HttpResponseMessage response;



        if (id.HasValue)

        {

            response = await Http.PutAsJsonAsync($"api/Grade/PutGrade/{id}", gradeDto);

        }

        else

        {

            response = await Http.PostAsJsonAsync("api/Grade/PostGrade", gradeDto);

        }



        if (response.IsSuccessStatusCode)

        {

            ShowMessage(ToastType.Success, "تم حفظ البيانات بنجاح.");

            Navigation.NavigateTo("/grades");

        }

        else

        {

            string errorMessage = await response.Content.ReadAsStringAsync();

            ShowMessage(ToastType.Danger, $"فشل في حفظ البيانات. الخطأ: {errorMessage}");

        }

    }



    private void Cancel()

    {

        Navigation.NavigateTo("/grades");

    }



    private async Task OnHideModalClick()

    {

        await modal.HideAsync();

    }



    private void ShowMessage(ToastType toastType, string message)

    {

        messages.Add(CreateToastMessage(toastType, message));

    }



    private ToastMessage CreateToastMessage(ToastType toastType, string message)

    {

        return new ToastMessage

            {

                Type = toastType,

                Title = "عملية البيانات",

                HelpText = $"{DateTime.Now}",

                Message = message,

            };

    }
}
