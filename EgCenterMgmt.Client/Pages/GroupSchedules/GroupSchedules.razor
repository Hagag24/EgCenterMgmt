@page "/groupschedules"
@page "/groupschedules/group/{groupid:int}"

@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "Admin, Assistant")]

<PageTitle>إدارة جداول المجموعات</PageTitle>

<h3>جداول المجموعات</h3>
    <Button Color="ButtonColor.Success" Class="mb-3" @onclick="CreateGroupSchedule">إضافة جدول مجموعة جديد</Button>

@if (groupSchedules == null)
{
    <p><em>جار التحميل...</em></p>
}
else
{
    <Modal @ref="modal" Title="تأكيد حذف جدول المجموعة">
        <BodyTemplate>
            <h5>هل تريد حذف جدول المجموعة لمجموعة رقم <span>@GroupScheduleId</span></h5>
            <h5>سيتم حذف جميع البيانات المرتبطة بهذا الجدول.</h5>
        </BodyTemplate>
        <FooterTemplate>
            <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">رجوع</Button>
            <Button Color="ButtonColor.Danger" @onclick="() => ConfirmDeleteGroupSchedule(GroupScheduleId)">حذف</Button>
        </FooterTemplate>
    </Modal>

    <Grid TItem="VgroupSchedule"
          DataProvider="GroupSchedulesDataProvider"
          AllowFiltering="true"
          AllowSorting="true"
          Class="table-hover table"
          FiltersRowCssClass="bg-primary text-white border-bottom-0 bg-opacity-25"
          HeaderRowCssClass="bg-primary text-white border-bottom-0"
          PageSize="150"
          AllowPaging="true"
          Responsive="true">
        <GridColumns>
            <GridColumn TItem="VgroupSchedule" HeaderText="رقم الموعد" PropertyName="ScheduleId" SortKeySelector="item => item.ScheduleId">
                @context.ScheduleId
            </GridColumn>
            <GridColumn TItem="VgroupSchedule" HeaderText="اسم المجموعة" PropertyName="GroupName" SortKeySelector="item => item.GroupName">
                @context.GroupName
            </GridColumn>
            <GridColumn TItem="VgroupSchedule" HeaderText="اليوم" PropertyName="DayOfWeek" SortKeySelector="item => item.DayOfWeek">
                @context.DayOfWeek
            </GridColumn>
            <GridColumn TItem="VgroupSchedule" HeaderText="وقت البدء" PropertyName="GroupName" SortKeySelector="item => item.StartTime">
                @context.StartTime?.ToString("hh\\:mm")
            </GridColumn>
            <GridColumn TItem="VgroupSchedule" HeaderText="وقت اللإنتهاء" PropertyName="DayOfWeek" SortKeySelector="item => item.EndTime">
                @context.EndTime?.ToString("hh\\:mm")
            </GridColumn>
            <GridColumn TItem="VgroupSchedule" HeaderText="تعديل" PropertyName="Operations">
                <Button Color="ButtonColor.Primary" @onclick="() => EditGroupSchedule(context.ScheduleId)">تعديل</Button>
            </GridColumn>
            <GridColumn TItem="VgroupSchedule" HeaderText="حذف" PropertyName="Operations">
                <Button Color="ButtonColor.Danger" @onclick="() => OnShowModalClick(context)">حذف</Button>
            </GridColumn>

        </GridColumns>

    </Grid>
}

<Toasts class="p-3" Messages="messages" Placement="ToastsPlacement.TopRight" />

@code {
    private Modal modal = default!;
    private List<VgroupSchedule>? groupSchedules;
    private int GroupScheduleId;
    private string? GroupScheduleName;
    private List<ToastMessage> messages = new();
    private bool isAdmin;
    [Parameter] public int? groupid { get; set; }

    private async Task<GridDataProviderResult<VgroupSchedule>> GroupSchedulesDataProvider(GridDataProviderRequest<VgroupSchedule> request)
    {
        if (groupSchedules == null)
        {
            if (groupid.HasValue)
            {
                groupSchedules = await Http.GetFromJsonAsync<List<VgroupSchedule>>($"api/GroupSchedule/GetVgroupSchedulesByGroupId?groupid={groupid.Value}");
            }
            else
            {
                groupSchedules = await Http.GetFromJsonAsync<List<VgroupSchedule>>("api/GroupSchedule/GetVgroupSchedules");
            }
        }
        IEnumerable<VgroupSchedule> dataToApply = groupSchedules ?? Enumerable.Empty<VgroupSchedule>();
        return request.ApplyTo(dataToApply);
    }

    private async Task OnShowModalClick(VgroupSchedule groupSchedule)
    {
        GroupScheduleId = groupSchedule.ScheduleId;
        GroupScheduleName = groupSchedule.GroupName;
        await modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
        GroupScheduleId = 0;
        GroupScheduleName = null;
    }

    protected override async Task OnInitializedAsync()
    {
        if (groupid.HasValue)
        {
            groupSchedules = await Http.GetFromJsonAsync<List<VgroupSchedule>>($"api/GroupSchedule/GetVgroupSchedulesByGroupId?groupid={groupid.Value}");
        }
        else
        {
            groupSchedules = await Http.GetFromJsonAsync<List<VgroupSchedule>>("api/GroupSchedule/GetVgroupSchedules");
        }
    }

    private void EditGroupSchedule(int id)
    {
        Navigation.NavigateTo($"/groupschedule/{id}");
    }

    private async Task ConfirmDeleteGroupSchedule(int ID)
    {
        var response = await Http.DeleteAsync($"api/GroupSchedule/DeleteGroupSchedule/{ID}");
        if (response.IsSuccessStatusCode)
        {
            ShowMessage(ToastType.Success, "تم حذف جدول المجموعة بنجاح.");
            if (groupid.HasValue)
            {
                groupSchedules = await Http.GetFromJsonAsync<List<VgroupSchedule>>($"api/GroupSchedule/GetVgroupSchedulesByGroupId/{groupid.Value}");
            }
            else
            {
                groupSchedules = await Http.GetFromJsonAsync<List<VgroupSchedule>>("api/GroupSchedule/GetVgroupSchedules");
            }
        }
        else
        {
            string errorMessage = await response.Content.ReadAsStringAsync();
            ShowMessage(ToastType.Danger, $"فشل في حذف جدول المجموعة. الخطأ: {errorMessage}");
        }
        await OnHideModalClick();
        await OnInitializedAsync();
    }

    private void CreateGroupSchedule()
    {
        Navigation.NavigateTo("/groupschedule");
    }

    private void ShowMessage(ToastType toastType, string message)
    {
        messages.Add(new ToastMessage
            {
                Type = toastType,
                Title = "عملية الحذف",
                Message = message,
                HelpText = $"{DateTime.Now}"
            });
    }
}
