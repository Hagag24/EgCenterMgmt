@page "/tenant"
@page "/tenant/{TId}"
@inject HttpClient Http
@inject NavigationManager Navigation
@attribute [Authorize(Roles = "SuperAdmin")]

<PageTitle>@(TId != string.Empty ? "تعديل المستأجر" : "إنشاء مستأجر جديد")</PageTitle>

<div class="container mt-5">
    @if (tenantDto == null)
    {
        <p><em>جار التحميل...</em></p>
    }
    else
    {
        <div class="card shadow">
            <div class="card-header text-center bg-scandary text-white">
                <h5 style="color: black;">@((TId != string.Empty ? "تعديل بيانات المستأجر" : "إدخال بيانات مستأجر جديد"))</h5>
            </div>
            <div class="card-body">
                <EditForm Model="tenantDto" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label for="tenantName" class="form-label">اسم المستأجر</label>
                        <InputText id="tenantName" class="form-control" @bind-Value="tenantDto.Name" />
                    </div>
                    <div class="mb-3">
                        <label for="tenantId" class="form-label">معرف المستأجر</label>
                        <InputText id="tenantId" class="form-control" @bind-Value="tenantDto.TId" />
                    </div>
                    <div class="mb-3">
                        <label for="connectionString" class="form-label">اتصال قاعدة البيانات</label>
                        <InputText id="connectionString" class="form-control" @bind-Value="tenantDto.ConnectionString" />
                    </div>
                    <div class="mb-3">
                        <label for="startDate" class="form-label">تاريخ البدء</label>
                        <InputDate id="startDate" class="form-control" @bind-Value="tenantDto.StartDate" />
                    </div>
                    <div class="mb-3">
                        <label for="endDate" class="form-label">تاريخ الانتهاء</label>
                        <InputDate id="endDate" class="form-control" @bind-Value="tenantDto.EndDate" />
                    </div>
                    <div class="mb-3">
                        <label for="isActive" class="form-label">مفعل</label>
                        <InputCheckbox id="isActive" class="form-check-input" @bind-Value="tenantDto.IsActive" />
                    </div>

                    <div class="d-flex justify-content-between">
                        <Button Color="ButtonColor.Success" @onclick="HandleValidSubmit">@((TId != string.Empty ? "تحديث" : "إنشاء"))</Button>
                        <Button Color="ButtonColor.Danger" @onclick="Cancel">إلغاء</Button>
                    </div>
                </EditForm>
            </div>
        </div>
    }

    <Toasts class="p-3" Messages="messages" Placement="ToastsPlacement.TopRight" />
</div>

@code {
    [Parameter] public string? TId { get; set; }
    private Tenant? tenantDto = new Tenant();
    private List<ToastMessage> messages = new();

    protected override async Task OnInitializedAsync()
    {
        if (TId! != string.Empty)
        {
            tenantDto = await Http.GetFromJsonAsync<Tenant>($"api/TenantSettings/GetTenant?tId={TId}");
        }
    }

    private async Task HandleValidSubmit()
    {
        HttpResponseMessage response;

        if (TId! != string.Empty)
        {
            response = await Http.PutAsJsonAsync($"api/TenantSettings/UpdateTenant?tId={TId}", tenantDto);
        }
        else
        {
            response = await Http.PostAsJsonAsync("api/TenantSettings/AddTenant", tenantDto);
        }

        if (response.IsSuccessStatusCode)
        {
            ShowMessage(ToastType.Success, "تم حفظ المستأجر بنجاح.");
            Navigation.NavigateTo("/tenants");
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            ShowMessage(ToastType.Danger, $"فشل في حفظ المستأجر. الخطأ: {errorMessage}");
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/tenants");
    }

    private void ShowMessage(ToastType toastType, string message)
    {
        messages.Add(new ToastMessage
            {
                Type = toastType,
                Title = "تنبيه",
                Message = message,
                HelpText = $"{DateTime.Now}"
            });
    }
}
