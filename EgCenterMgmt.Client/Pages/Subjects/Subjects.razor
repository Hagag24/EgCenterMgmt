@page "/subjects"

@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "Admin")]

<PageTitle>إدارة المواد الدراسية</PageTitle>

<h3>المواد الدراسية</h3>

<Button Color="ButtonColor.Success" Class="mb-3" @onclick="CreateSubject">إضافة مادة جديدة</Button>

@if (subjects == null)
{
    <p><em>جار التحميل...</em></p>
}
else
{
    <Modal @ref="modal" Title="تأكيد حذف المادة">
        <BodyTemplate>
            <h5>هل تريد حذف المادة <h1>"@SubjectName"</h1></h5>
            <h5>ستقوم بحذف كل البيانات المرتبطة بهذه المادة.</h5>
        </BodyTemplate>
        <FooterTemplate>
            <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">رجوع</Button>
            <Button Color="ButtonColor.Danger" @onclick="() => DeleteSubject(SubjectId)">حذف</Button>
        </FooterTemplate>
    </Modal>

    <Grid TItem="SubjectDto"
          DataProvider="SubjectsDataProvider"
          AllowFiltering="true"
          AllowSorting="true"
          Class="table-hover table"
          FiltersRowCssClass="bg-primary text-white border-bottom-0 bg-opacity-25"
          HeaderRowCssClass="bg-primary text-white border-bottom-0"
          PageSize="150"
          AllowPaging="true"
          Responsive="true">
        <GridColumns>
            <GridColumn TItem="SubjectDto" HeaderText="المادة" PropertyName="SubjectId" SortKeySelector="item => item.SubjectId">
                @context.SubjectId
            </GridColumn>
            <GridColumn TItem="SubjectDto" HeaderText="المادة" PropertyName="SubjectName" SortKeySelector="item => item.SubjectName">
                @context.SubjectName
            </GridColumn>
            <GridColumn TItem="SubjectDto" HeaderText="تعديل" PropertyName="Operations">
                <Button Color="ButtonColor.Primary" @onclick="() => EditSubject(context.SubjectId)">تعديل</Button>
            </GridColumn>
            <GridColumn TItem="SubjectDto" HeaderText="حذف" PropertyName="Operations">
                <Button Color="ButtonColor.Danger" @onclick="()=>OnShowModalClick(context)">حذف</Button>
            </GridColumn>
        </GridColumns>

    </Grid>
}

<Toasts class="p-3" Messages="messages" Placement="ToastsPlacement.TopRight" />


@code {
    private Modal modal = default!;
    private List<SubjectDto>? subjects;
    private List<ToastMessage> messages = new();

    private async Task<GridDataProviderResult<SubjectDto>> SubjectsDataProvider(GridDataProviderRequest<SubjectDto> request)
    {
        subjects ??= await Http.GetFromJsonAsync<List<SubjectDto>>("api/Subject/GetSubjects");
        IEnumerable<SubjectDto> dataToApply = subjects ?? Enumerable.Empty<SubjectDto>();
        return await Task.FromResult(request.ApplyTo(dataToApply));
    }

    public int SubjectId;
    public string? SubjectName;

    private async Task OnShowModalClick(SubjectDto subject)
    {
        SubjectId = subject.SubjectId;
        SubjectName = subject.SubjectName;
        await modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
        SubjectId = 0;
        SubjectName = null;
    }

    protected override async Task OnInitializedAsync()
    {
        subjects = await Http.GetFromJsonAsync<List<SubjectDto>>("api/Subject/GetSubjects");
    }

    private void EditSubject(int id)
    {
        Navigation.NavigateTo($"/subject/{id}");
    }

    private async Task DeleteSubject(int id)
    {
        var response = await Http.DeleteAsync($"api/Subject/DeleteSubject/{id}");
        if (response.IsSuccessStatusCode)
        {
            ShowMessage(ToastType.Success, "تم حذف المادة بنجاح.");
            subjects = await Http.GetFromJsonAsync<List<SubjectDto>>("api/Subject/GetSubjects");
        }
        else
        {
            string errorMessage = await response.Content.ReadAsStringAsync();
            ShowMessage(ToastType.Danger, $"فشل في حذف المادة. الخطأ: {errorMessage}");
        }
        await OnHideModalClick();
    }

    private void CreateSubject()
    {
        Navigation.NavigateTo("/subject");
    }

    private void ShowMessage(ToastType toastType, string message)
    {
        messages.Add(new ToastMessage
            {
                Type = toastType,
                Title = "تنبيه",
                Message = message,
                HelpText = $"{DateTime.Now}"
            });
    }
}

@* @code {
    private Modal modal = default!;
    private List<SubjectDto>? subjects;

    private async Task<GridDataProviderResult<SubjectDto>> SubjectsDataProvider(GridDataProviderRequest<SubjectDto> request)
    {
        subjects ??= await Http.GetFromJsonAsync<List<SubjectDto>>("api/Subject/GetSubjects");
        IEnumerable<SubjectDto> dataToApply = subjects ?? Enumerable.Empty<SubjectDto>();
        return await Task.FromResult(request.ApplyTo(dataToApply));
    }


    public int SubjectId;
    public string? SubjectName;

    private async Task OnShowModalClick(SubjectDto subject)
    {
        SubjectId = subject.SubjectId;
        SubjectName = subject.SubjectName;
        await modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
        SubjectId = 0;
        SubjectName = null;
    }

    protected override async Task OnInitializedAsync()
    {
        subjects = await Http.GetFromJsonAsync<List<SubjectDto>>("api/Subject/GetSubjects");
    }

    private void EditSubject(int id)
    {
        Navigation.NavigateTo($"/subject/{id}");
    }

    private async Task DeleteSubject(int id)
    {
        var response = await Http.DeleteAsync($"api/Subject/DeleteSubject/{id}");
        if (response.IsSuccessStatusCode)
        {
            await JSRuntime.InvokeVoidAsync("alert", "تم حذف المادة بنجاح.");
            subjects = await Http.GetFromJsonAsync<List<SubjectDto>>("api/Subject/GetSubjects");
        }
        else
        {
            string errorMessage = await response.Content.ReadAsStringAsync();
            await JSRuntime.InvokeVoidAsync("alert", $"فشل في حذف المادة. الخطأ: {errorMessage}");
        }
        await OnHideModalClick();
        await OnInitializedAsync();
    }

    private void CreateSubject()
    {
        Navigation.NavigateTo("/subject");
    }
}
 *@